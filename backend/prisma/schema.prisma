// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  swotAnalysis   SwotAnalysis?
  habits         Habit[]
  tasks          Task[]
  goals          Goal[]
  preferences    UserPreferences?
  pomodoroSessions PomodoroSession[]

  @@map("users")
}

model SwotAnalysis {
  id     String @id @default(uuid())
  userId String @unique

  // SWOT data as JSON arrays
  forces       String[] // Forces/Strengths
  faiblesses   String[] // Weaknesses  
  opportunites String[] // Opportunities
  menaces      String[] // Threats

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("swot_analyses")
}

model Habit {
  id       String      @id @default(uuid())
  userId   String
  name     String      // sport, reading, networking
  label    String      // "ðŸ’ª Sport (1h)"
  streak   Int         @default(0)
  completed Boolean    @default(false)
  type     HabitType   @default(DAILY)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("habits")
}

enum HabitType {
  DAILY
  WEEKLY
  MONTHLY
}

model Task {
  id          String     @id @default(uuid())
  userId      String
  title       String
  description String?
  completed   Boolean    @default(false)
  category    String?    // planning, dashboard, etc.
  section     String?    // month1, month2, etc.
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Goal {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?
  progress    Float     @default(0) // 0-100
  target      Float     @default(100)
  unit        String?   // "contacts", "FCFA", etc.
  deadline    DateTime?
  category    String?   // smart-goals, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model UserPreferences {
  id            String @id @default(uuid())
  userId        String @unique
  activeSection String @default("dashboard")
  activeTab     String @default("drones")
  theme         String @default("light")
  language      String @default("fr")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PomodoroSession {
  id        String   @id @default(uuid())
  userId    String
  duration  Int      // en secondes
  completed Boolean  @default(false)
  startedAt DateTime @default(now())
  endedAt   DateTime?
  
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pomodoro_sessions")
}

// Table pour stocker les donnÃ©es de marchÃ© et opportunitÃ©s
model MarketOpportunity {
  id          String @id @default(uuid())
  sector      String // "drones", "si", etc.
  category    String // "petrole", "agriculture", etc.
  title       String
  description String?
  potential   String // "2B-5B FCFA"
  competition String // "TrÃ¨s faible", "Faible", etc.
  roi         String // "6-12 mois"
  score       Int    @default(0) // 0-10
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("market_opportunities")
}

// Table pour les contacts utiles
model Contact {
  id           String      @id @default(uuid())
  name         String
  organization String
  description  String?
  contactType  ContactType
  phone        String?
  email        String?
  website      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

enum ContactType {
  PARTNERSHIP
  FUNDING
  INCUBATION
  GOVERNMENT
  TECH
} 